package wr.leetcode.algo.shortest_distance_from_all_buildings;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

public class Solution {

    //Method1: TLE on large input
    public int shortestDistance0(int[][] grid) {
        int buildingCount = 0;
        Set<Point> starts = new HashSet<>();

        for (int i = 0; i < grid.length; ++i){
            for (int j = 0; j < grid[0].length; ++j) {
                int val = grid[i][j];
                if(0 == val) {
                    starts.add(new Point(i,j,0));
                } else if (1 == val) {
                    buildingCount += 1;
                }
            }
        }

        int minDist = Integer.MAX_VALUE;
        for ( Point v : starts) {
            int sum = sumOfDist(grid, v, buildingCount);
            if (sum < minDist) {
                minDist = sum;
            }
        }
        return (Integer.MAX_VALUE == minDist)?(-1):(minDist);
    }

    public Set<Point> reachableEmpty (Point start, int[][] grid) {
        Set<Point> ret = new HashSet<>();

        int [] diffx = {-1, 0, 0, 1};
        int [] diffy = {0, -1, 1, 0};

        int m = grid.length;
        int n = grid[0].length;
        Queue<Point> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        queue.offer(start);
        visited.add(start.x*n + start.y);

        while(!queue.isEmpty()) {
            Point v = queue.poll();
            for (int i = 0; i < 4; ++i) {
                int x = v.x + diffx[i];
                int y = v.y + diffy[i];
                //BUG: this function should not have it
                //int dist = v.dist + 1;
                if(x > -1 && x < m && y > -1 && y < n && grid[x][y] == 0
                        && !visited.contains(x*n + y)) {
                    Point p = new Point(x, y, 0);
                    queue.offer(p);
                    visited.add(x*n + y);
                    ret.add(p);
                }
            }
        }
        return ret;
    }

    //Method2: starts should be from one of the building
    public int shortestDistance(int[][] grid) {
        int buildingCount = 0;
        Set<Point> starts = null;

        for (int i = 0; i < grid.length; ++i){
            for (int j = 0; j < grid[0].length; ++j) {
                int val = grid[i][j];
                if (1 == val) {
                    buildingCount += 1;
                    if(null == starts) {
                        starts = reachableEmpty(new Point(i, j, 0), grid);
                    }
                }
            }
        }

        int minDist = Integer.MAX_VALUE;
        for ( Point v : starts) {
            int sum = sumOfDist(grid, v, buildingCount);
            if (sum < minDist) {
                minDist = sum;
            }
        }
        return (Integer.MAX_VALUE == minDist)?(-1):(minDist);
    }


    public int sumOfDist( int[][] grid, Point start, int buildingCount ) {

        int [] diffx = {-1, 0, 0, 1};
        int [] diffy = {0, -1, 1, 0};

        int m = grid.length;
        int n = grid[0].length;
        int reached = 0;
        int sum = 0;
        Queue<Point> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        queue.offer(start);
        visited.add(start.x*n + start.y);

        while(!queue.isEmpty()) {
            Point v = queue.poll();
            for (int i = 0; i < 4; ++i) {
                int x = v.x + diffx[i];
                int y = v.y + diffy[i];
                int dist = v.dist + 1;
                if(grid[v.x][v.y] == 0 && x > -1 && x < m && y > -1 && y < n && !visited.contains(x*n + y)) {
                    //TLE improvements: enqueue case tuning
                    int val = grid[x][y];
                    if( 1 == val) {
                        reached ++;
                        sum += dist;
                    } else if(0 == val){
                        Point p = new Point(x, y, dist);
                        queue.offer(p);
                    }
                    visited.add(x * n + y);
                }
            }
        }

        int ret = Integer.MAX_VALUE;
        if(reached == buildingCount ) {
            ret = sum;
        }
        return ret;
    }


    class Point{
        int x;
        int y;
        int dist;

        public Point(int x, int y, int dist) {
            this.x = x;
            this.y = y;
            this.dist = dist;
        }

        @Override
        public String toString() {
            return String.format("%s,%s", x, y);
        }
    }

    public static void main(String[] args) {

        int[][] arr = {
                {1,0,2,0,1},
                {0,0,0,0,0},
                {0,0,1,0,0}
        };

        int[][] brr ={{2,0,0,0,2,0,2,0,2,0,0,0,2,0,0,0,2,0,0,1,0,2,0,0,2,0,0,0,0,0,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2},{2,0,2,0,2,0,0,0,2,0,0,0,0,0,2,0,0,0,2,2,2,0,2,1,2,2,0,0,0,1,0,0,0,2,2,0,0,0,0,0,0,2,0,2,0,0,2,0,2,0},{2,0,2,0,0,2,0,1,0,1,2,2,0,0,0,2,2,2,0,2,2,0,0,2,2,0,2,2,2,2,0,0,0,1,0,1,2,0,1,0,2,2,0,0,2,2,0,0,2,0},{0,2,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,2,1,0,0,0,2,0,2,0,0,0,0,2,2,0,2,0,2,2,0,2,0,0,0,0,2,0,2,2,2,0},{0,0,0,2,0,0,0,0,1,0,2,0,0,2,2,0,2,2,0,0,0,0,0,0,2,2,0,0,2,0,0,2,0,2,0,0,2,2,2,0,0,0,0,2,0,0,0,0,0,0},{0,2,1,0,2,2,2,2,0,0,2,0,2,0,0,0,2,0,2,0,0,0,0,2,0,0,2,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2},{1,2,0,0,1,0,0,2,0,0,0,2,0,2,2,0,2,0,2,1,0,0,2,0,0,2,0,0,2,0,0,0,0,2,0,0,2,0,0,2,2,0,0,1,0,2,2,2,0,1},{0,0,2,2,0,2,1,0,0,2,0,0,0,2,2,2,0,0,0,2,0,0,0,2,0,2,0,0,0,0,2,2,0,2,2,1,2,0,2,2,0,0,2,0,2,0,0,0,2,2},{0,0,0,0,0,2,0,0,0,0,0,0,2,2,0,0,2,2,1,0,2,2,0,2,2,0,0,2,2,2,1,0,2,2,0,0,0,0,2,0,0,2,2,0,2,0,0,0,0,0},{0,1,0,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,0,0,0,0,0,2,0,0,2,2,2,2,0,0,0,0,0,1,2,0,2,0,2,0,0,0,0,0,0,2,2,0},{2,2,2,0,2,2,0,0,0,0,0,0,1,0,2,0,2,2,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,1,2,0,2,0,0,0,2,2,0,0,1,0,2,2},{0,0,0,2,2,2,0,0,2,0,0,0,2,2,2,0,0,0,2,0,0,0,0,0,0,2,2,0,1,2,0,0,2,2,0,2,0,2,0,0,0,0,0,2,2,0,1,2,2,2},{0,2,0,0,0,1,0,0,0,0,2,0,2,2,0,2,2,0,0,0,0,2,0,0,0,2,0,2,2,0,0,0,0,2,0,0,0,0,0,0,0,0,2,2,0,2,0,0,0,0},{0,0,2,0,2,0,0,0,0,1,0,0,1,0,2,2,0,0,0,0,2,0,2,0,2,1,2,0,0,0,2,0,0,0,0,0,0,2,0,0,0,2,0,2,0,2,0,2,2,0},{2,0,2,2,2,0,2,0,2,2,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,2,2,2,2,2,2,0,0,0,1,0,0,0,2,2,2,0,0,0,0,0,2,2},{2,2,0,2,0,2,0,2,0,2,0,0,0,0,0,2,0,0,2,0,2,2,0,2,2,0,2,0,2,0,0,0,2,0,0,2,0,2,0,0,0,0,0,1,2,0,2,2,0,0},{0,0,0,0,0,0,2,2,0,0,2,2,0,0,2,0,2,0,0,2,2,2,0,0,2,0,0,0,2,0,0,0,0,0,0,1,2,2,0,0,0,0,0,2,2,2,0,0,2,0},{2,0,2,0,2,0,2,0,0,2,1,2,0,2,2,2,1,0,0,0,0,0,2,0,0,2,1,2,0,0,2,2,0,0,2,2,2,2,0,0,0,0,2,2,0,0,2,2,2,0},{2,1,2,2,2,2,1,0,0,1,2,2,2,0,0,0,0,2,2,0,0,0,2,0,0,2,0,0,2,0,2,0,1,2,2,0,0,0,2,1,0,0,0,0,0,1,2,2,2,0},{2,0,0,0,2,1,0,1,2,2,2,0,0,0,0,0,0,2,0,2,0,0,2,1,2,2,2,0,0,2,2,0,0,2,2,0,0,0,2,0,0,0,0,2,0,2,2,2,0,0},{0,0,0,0,0,0,2,2,0,0,2,0,0,1,1,2,0,2,2,2,0,0,2,2,2,2,0,2,0,2,0,2,0,2,2,0,0,0,0,0,2,2,0,2,2,0,0,0,2,0},{0,0,0,2,0,2,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,2,0,2,2,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,2,0,0,0,0},{2,2,0,0,2,0,2,0,2,0,0,0,0,0,0,0,2,0,2,0,0,2,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,1,2,1},{0,2,0,0,2,2,2,0,0,0,1,0,2,0,2,0,0,0,2,2,2,0,0,0,0,0,2,0,0,0,2,0,2,0,2,2,2,0,0,2,0,0,2,0,2,0,0,0,0,1},{0,0,0,0,0,0,2,0,2,0,2,0,0,2,0,2,2,0,0,0,0,0,2,0,2,0,2,2,2,2,2,0,2,0,0,2,2,0,2,0,2,0,0,2,0,0,1,0,0,2},{0,0,0,2,2,0,0,0,2,0,0,2,0,2,2,2,2,0,0,0,2,0,0,0,0,2,0,0,1,0,0,2,0,0,0,0,2,0,0,2,0,2,2,2,2,0,1,2,2,0},{0,0,2,2,0,0,1,0,0,2,0,0,2,2,0,2,2,2,0,0,0,0,2,0,2,0,0,2,0,1,0,0,2,0,2,2,0,0,2,2,0,2,0,0,0,0,2,0,0,2},{2,2,0,0,2,0,2,2,0,0,0,0,1,0,2,2,0,0,0,0,0,0,0,2,0,0,2,2,0,2,0,0,2,0,0,0,0,0,0,0,2,2,0,2,0,2,0,0,2,2},{0,0,0,0,0,2,0,0,2,0,2,2,2,1,2,2,0,2,2,1,2,2,0,0,2,0,2,0,0,2,1,2,0,2,0,0,0,0,2,0,2,2,2,1,0,2,0,2,0,1},{2,1,2,0,2,0,2,0,0,0,2,0,0,2,2,2,2,2,0,0,0,0,0,2,2,0,0,0,0,0,2,0,2,0,2,2,0,2,2,0,0,0,0,0,0,0,2,0,1,0},{0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,2,0,0,2,0,0,0,2,0,0,0,0,0,2,2,2,0,0,0,2,2,0,2,0,0,2,2,0,0},{0,0,1,2,0,2,2,2,0,2,0,0,0,0,0,0,2,2,0,2,1,0,2,2,0,0,2,0,0,2,0,0,0,2,2,0,0,1,0,0,0,0,0,2,0,0,2,0,0,0},{0,2,2,2,0,2,0,0,0,0,0,1,0,0,2,2,0,0,0,2,2,2,2,2,0,2,0,2,0,2,0,0,2,0,2,0,0,2,0,0,0,1,1,2,2,0,2,0,0,0},{0,0,2,0,0,2,0,0,2,0,0,2,0,0,0,0,2,0,0,0,2,0,0,0,0,2,0,1,0,0,2,0,1,0,0,0,0,2,0,0,0,0,0,2,0,0,1,2,0,2},{2,0,0,0,0,2,0,0,1,2,0,0,0,0,0,2,0,2,0,2,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,2,0,0,0,1,2,1,0,2},{2,1,2,0,0,0,0,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,1,0,0,0,0,2,0,2,0,2,2,2,0,0,2,0,2,0,2,0,0,0,0,2,0},{0,2,0,2,2,0,0,1,1,2,1,2,0,2,0,0,0,2,2,1,0,0,2,2,0,0,0,1,0,2,0,0,2,0,0,1,0,0,0,0,0,1,0,1,0,2,0,0,2,0},{0,2,2,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,2,2,0,0,2,2,0,0,2,0,2,0,0,1,1,2,2,0,0,0,0,0,2,0,0,0,0,0,0,2,2,0},{0,0,0,0,1,1,0,0,0,0,0,0,0,2,0,0,2,0,2,0,0,0,0,2,0,2,0,2,0,0,2,0,2,2,1,0,2,2,0,1,2,0,0,2,0,0,0,0,0,2}};


        Solution sol = new Solution();
        long start = System.currentTimeMillis();
        int ret = sol.shortestDistance(brr);
        System.out.println(System.currentTimeMillis() - start);
        System.out.println(ret);
    }

}
