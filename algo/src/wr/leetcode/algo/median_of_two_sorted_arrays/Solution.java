package wr.leetcode.algo.median_of_two_sorted_arrays;import java.util.Arrays;public class Solution {    public double findMedianSortedArrays(int A[], int B[]) {        if(null == A || null == B || (A.length == B.length && A.length == 0)) {            throw new RuntimeException("Invalid Input!");        }        int total = A.length + B.length;        double ret;        if(0 == total%2) {            ret = (findKthElement(A,B,total/2) + findKthElement(A,B,total/2+1))/2.0;        } else {            ret = findKthElement(A, B, total/2+1);        }        return ret;    }    public int findKthElement(int A[], int B [], int k) {        if(A.length == 0) {            return B[k-1];        }        if(B.length == 0) {            return A[k-1];        }        int midA = (0+A.length-1)/2;        int midB = (0+B.length-1)/2;        if(A[midA] > B[midB]) {            return findKthElement(B, A, k);        }        int leftTotal = midA + midB + 2;        if (leftTotal <= k) {            return findKthElement(Arrays.copyOfRange(A, midA+1, A.length)                ,B, k - midA - 1);        } else {            return findKthElement(A, Arrays.copyOfRange(B, 0, midB), k);        }    }    public static void main(String[] args) {        Solution sol = new Solution();        int[] A = {1,2,3,4,5};        int[] B = {1,2,3,4,5};        for (int i = 1; i <= 10; ++i) {            System.out.println(sol.findKthElement(A, B, i));        }    }}