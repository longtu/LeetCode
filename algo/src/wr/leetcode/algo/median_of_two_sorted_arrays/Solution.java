package wr.leetcode.algo.median_of_two_sorted_arrays;import java.util.Arrays;public class Solution {    public double findMedianSortedArrays(int A[], int B[]) {        if(null == A || null == B || (A.length == B.length && A.length == 0)) {            throw new RuntimeException("Invalid Input!");        }        int total = A.length + B.length;        double ret;        if(0 == total%2) {            ret = (findKthElement(A,B,total/2) + findKthElement(A,B,total/2+1))/2.0;        } else {            ret = findKthElement(A, B, total/2+1);        }        return ret;    }    public int findKthElement(int A[], int B [], int k) {        if(A.length < B.length) {            return findKthElement(B,A,k);        }        //lenA > lenB        int ret;        if(B.length == 0) {            ret = A[k-1];        } else {            int midA = (0 + A.length-1)/2;            if(midA + 1 >= k){                return findKthElement( Arrays.copyOfRange(A, 0, midA + 1),B, k);            } else {                int midB = k-2 - midA;                if(B[midB] == A[midA]) {                    ret = A[midA];                } else if(B[midB] < A[midA]) {                    ret = findKthElement(Arrays.copyOfRange(A,0, midA+1), B, k);                } else {                    ret = findKthElement(Arrays.copyOfRange(B,0, midB+1),A,k);                }            }        }        return ret;    }    public static void main(String[] args) {        Solution sol = new Solution();        int[] A = {1,2,3,4,5};        int[] B = {1,2,3,4,5};        for (int i = 1; i <= 10; ++i) {            System.out.println(sol.findKthElement(A, B, i));        }    }}