package wr.leetcode.algo.walls_and_gates;

import java.util.*;
import java.util.concurrent.SynchronousQueue;

public class Solution {

    /*
    public void wallsAndGates(int[][] rooms) {
        if( null != rooms && rooms.length > 0 && rooms[0].length > 0) {
            int h = rooms.length;
            int w = rooms[0].length;

            for (int i = 0; i < h; ++i) {
                for (int j = 0; j < w; ++j ) {
                    if(0 == rooms[i][j]) {
                        bfs(rooms, i,j);
                    }
                }
            }
        }
    }

    public void bfs(int[][] rooms, int i, int j) {
        int [] dx = {-1, 0, 0, 1};
        int [] dy = {0, -1, +1, 0};

        int h = rooms.length;
        int w = rooms[0].length;
        Queue<Pos> q = new LinkedList<>();
        q.offer(new Pos(i,j,0));
        Set<Integer> visited = new HashSet<>();
        visited.add(w*i + j);

        while(!q.isEmpty()) {
            Pos v = q.poll();
            for (int k = 0; k< 4; ++k) {
                int nx = v.x + dx[k];
                int ny = v.y + dy[k];
                int ndist = v.dist + 1;
                int key = w*nx + ny;
                if(nx > -1 && nx < h && ny > -1 && ny < w
                        && rooms[nx][ny] != -1
                        && rooms[nx][ny] != 0   //TLE BUG: should check 0 as well
                    && !visited.contains(key)) {
                    visited.add(key);
                    q.offer(new Pos(nx, ny, ndist));
                    if(ndist < rooms[nx][ny]){
                        rooms[nx][ny] = ndist;
                    }
                }
            }
        }
    }

    class Pos {
        int x;
        int y;
        int dist;
        public Pos (int x, int y, int dist) {
            this.x = x;
            this.y = y;
            this.dist = dist;
        }
    }*/

    public void wallsAndGates(int[][] rooms) {
        if( null == rooms || rooms.length == 0 || rooms[0].length == 0) {
            return ;
        }
        int m = rooms.length;
        int n = rooms[0].length;
        Queue<Pos> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (rooms[i][j] == 0) {
                    queue.offer(new Pos(i, j, 0));
                    visited.add(n*i + j);
                }
            }
        }
        bfs(rooms,queue,visited);
    }

    private void bfs(int[][] boards, Queue<Pos> queue, Set<Integer> visited) {

        int m = boards.length;
        int n = boards[0].length;

        int[][] neighbours = {{-1,0},{1,0},{0,1},{0,-1}};

        while(!queue.isEmpty()) {
            Pos v = queue.poll();
                boards[v.r][v.c] = v.dist;

            for (int[] near : neighbours) {
                int nr = near[0] + v.r;
                int nc = near[1] + v.c;
                int key = nr * n + nc;
                if(nr >=0 && nr < m && nc >= 0 && nc < n && !visited.contains(key)
                        && boards[nr][nc] > v.dist + 1 ) {
                    queue.offer(new Pos(nr, nc, v.dist + 1));
                    visited.add(key);
                }
            }
        }
    }

    class Pos {
        int r;
        int c;
        int dist;
        public Pos (int r, int c, int dist) {
            this.r = r;
            this.c = c;
            this.dist = dist;
        }
    }



    public static void main(String[] args) {
        Solution sol = new Solution();
        int[][] rooms = {
                {Integer.MAX_VALUE,  -1,  0,  Integer.MAX_VALUE},
                {Integer.MAX_VALUE,  Integer.MAX_VALUE,  Integer.MAX_VALUE,  -1},
                {Integer.MAX_VALUE,  -1,  Integer.MAX_VALUE,  -1},
                {0,  -1,  Integer.MAX_VALUE,  Integer.MAX_VALUE},
        };
        int[][] rooms2 = {{-1,0,-1,0,2147483647,-1,2147483647,2147483647,2147483647,2147483647,-1,2147483647,0,-1,-1,2147483647,-1,0,2147483647,-1,2147483647,-1,0,-1,0,2147483647,2147483647,-1,2147483647,-1,0,-1,0,-1,2147483647,-1,2147483647,0,2147483647,-1,-1},{-1,-1,2147483647,2147483647,2147483647,2147483647,-1,2147483647,0,-1,-1,-1,2147483647,0,2147483647,2147483647,0,2147483647,2147483647,-1,0,-1,2147483647,2147483647,2147483647,0,0,0,0,0,-1,-1,-1,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,-1},{-1,2147483647,0,0,0,2147483647,0,0,-1,0,2147483647,0,0,0,2147483647,-1,2147483647,2147483647,0,-1,2147483647,0,0,-1,-1,0,-1,2147483647,0,0,2147483647,2147483647,2147483647,0,-1,0,0,-1,0,-1,-1},{2147483647,-1,2147483647,-1,2147483647,2147483647,2147483647,0,0,-1,-1,-1,2147483647,0,2147483647,2147483647,-1,-1,2147483647,2147483647,-1,-1,0,0,2147483647,-1,0,-1,0,-1,2147483647,-1,-1,-1,0,0,0,0,2147483647,-1,2147483647},{-1,-1,-1,-1,0,-1,2147483647,-1,0,-1,-1,0,0,2147483647,-1,0,-1,-1,0,-1,2147483647,0,-1,2147483647,0,-1,2147483647,2147483647,0,0,2147483647,0,-1,2147483647,2147483647,-1,2147483647,-1,0,2147483647,0},{0,-1,0,2147483647,2147483647,2147483647,2147483647,0,0,-1,-1,-1,2147483647,-1,0,-1,-1,2147483647,-1,-1,-1,0,-1,2147483647,-1,0,2147483647,2147483647,2147483647,2147483647,0,2147483647,-1,0,2147483647,2147483647,-1,2147483647,-1,0,0},{2147483647,0,2147483647,-1,2147483647,-1,0,0,0,0,2147483647,2147483647,0,0,2147483647,-1,0,0,2147483647,0,2147483647,-1,0,0,0,-1,-1,2147483647,2147483647,0,-1,-1,0,2147483647,-1,-1,-1,2147483647,2147483647,-1,2147483647},{0,0,0,0,0,2147483647,0,-1,0,2147483647,0,0,0,-1,0,-1,-1,-1,0,2147483647,2147483647,0,-1,2147483647,-1,0,-1,2147483647,0,-1,0,-1,-1,0,-1,2147483647,0,2147483647,-1,0,0},{-1,-1,-1,2147483647,-1,2147483647,0,-1,0,-1,-1,0,0,-1,2147483647,0,0,2147483647,0,2147483647,0,2147483647,-1,2147483647,0,2147483647,-1,2147483647,-1,2147483647,-1,2147483647,2147483647,2147483647,2147483647,0,-1,0,-1,-1,0},{2147483647,2147483647,2147483647,2147483647,0,0,0,2147483647,2147483647,-1,2147483647,0,-1,-1,2147483647,-1,-1,2147483647,2147483647,-1,-1,2147483647,2147483647,-1,-1,-1,2147483647,2147483647,2147483647,2147483647,-1,-1,0,-1,2147483647,0,0,2147483647,-1,0,0},{2147483647,-1,2147483647,0,-1,2147483647,-1,-1,0,2147483647,2147483647,0,-1,-1,0,2147483647,0,2147483647,2147483647,-1,2147483647,-1,0,-1,0,2147483647,0,2147483647,-1,0,2147483647,0,2147483647,0,0,2147483647,0,2147483647,0,-1,-1},{-1,0,0,-1,-1,2147483647,-1,2147483647,0,-1,0,-1,0,0,-1,0,-1,0,0,0,-1,2147483647,-1,-1,-1,0,0,2147483647,-1,2147483647,2147483647,0,2147483647,2147483647,2147483647,-1,-1,-1,-1,2147483647,0},{2147483647,2147483647,2147483647,-1,2147483647,0,0,2147483647,2147483647,2147483647,-1,-1,-1,-1,2147483647,-1,-1,2147483647,0,2147483647,0,2147483647,-1,0,0,2147483647,0,2147483647,0,2147483647,2147483647,-1,2147483647,2147483647,0,-1,0,-1,-1,0,-1},{-1,0,-1,-1,-1,0,2147483647,0,-1,-1,0,0,0,2147483647,0,0,2147483647,2147483647,-1,0,0,0,0,0,0,0,2147483647,-1,0,0,0,2147483647,-1,0,2147483647,0,-1,0,2147483647,-1,0},{2147483647,-1,0,-1,-1,0,-1,-1,-1,2147483647,-1,-1,-1,-1,-1,2147483647,-1,0,-1,2147483647,2147483647,0,0,-1,0,0,2147483647,0,2147483647,-1,0,0,0,0,0,2147483647,-1,0,0,2147483647,-1},{2147483647,0,-1,-1,-1,-1,2147483647,0,2147483647,-1,-1,2147483647,-1,0,0,2147483647,2147483647,-1,2147483647,-1,-1,2147483647,2147483647,2147483647,-1,0,0,2147483647,0,-1,0,2147483647,2147483647,2147483647,-1,-1,-1,-1,-1,0,0},{2147483647,2147483647,2147483647,-1,0,2147483647,2147483647,-1,2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647,-1,2147483647,-1,-1,-1,-1,0,0,-1,2147483647,-1,2147483647,2147483647,0,2147483647,0,-1,-1,2147483647,2147483647,0,-1,0,-1,-1,-1},{0,0,0,-1,2147483647,0,-1,-1,2147483647,2147483647,0,-1,2147483647,2147483647,-1,2147483647,-1,2147483647,-1,2147483647,-1,0,-1,2147483647,0,2147483647,2147483647,2147483647,0,2147483647,2147483647,-1,2147483647,2147483647,0,0,0,2147483647,-1,0,0},{0,0,0,0,2147483647,-1,2147483647,2147483647,-1,-1,0,2147483647,2147483647,-1,0,2147483647,0,2147483647,-1,2147483647,0,-1,-1,0,0,2147483647,-1,-1,-1,2147483647,0,0,2147483647,2147483647,2147483647,2147483647,-1,-1,-1,0,0},{2147483647,2147483647,2147483647,2147483647,0,0,2147483647,0,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,2147483647,-1,-1,-1,2147483647,0,0,-1,2147483647,2147483647,2147483647,-1,2147483647,-1,2147483647,2147483647,-1,2147483647,0,0,2147483647},{-1,2147483647,-1,0,0,0,2147483647,-1,2147483647,-1,-1,-1,2147483647,0,-1,0,2147483647,0,-1,2147483647,2147483647,2147483647,2147483647,-1,-1,0,0,0,2147483647,2147483647,0,-1,2147483647,2147483647,2147483647,2147483647,2147483647,-1,2147483647,2147483647,2147483647},{-1,-1,0,2147483647,2147483647,-1,0,2147483647,2147483647,0,2147483647,-1,2147483647,0,-1,0,-1,0,0,0,0,2147483647,0,0,2147483647,2147483647,0,2147483647,0,2147483647,0,-1,0,2147483647,0,-1,0,0,2147483647,2147483647,2147483647},{-1,0,2147483647,-1,2147483647,-1,2147483647,2147483647,0,0,2147483647,0,-1,2147483647,2147483647,2147483647,-1,-1,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647,0,0,2147483647,0,0,2147483647,-1,-1,-1,2147483647,0,0,2147483647,0,-1,-1},{-1,-1,0,0,0,0,0,-1,-1,2147483647,-1,-1,2147483647,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647,-1,0,-1,2147483647,2147483647,-1,0,0,2147483647,-1,2147483647,-1,-1,0,2147483647,-1,2147483647,-1,-1,2147483647,0},{0,0,2147483647,-1,2147483647,2147483647,-1,2147483647,-1,-1,0,0,-1,0,2147483647,-1,2147483647,-1,-1,-1,0,-1,0,-1,-1,0,2147483647,2147483647,0,0,0,0,2147483647,-1,2147483647,-1,-1,-1,2147483647,-1,2147483647},{0,-1,2147483647,0,2147483647,2147483647,0,0,-1,-1,2147483647,2147483647,0,2147483647,2147483647,0,-1,0,0,2147483647,2147483647,2147483647,2147483647,0,0,-1,2147483647,0,0,-1,0,0,0,-1,0,0,-1,0,-1,0,2147483647},{2147483647,0,0,-1,2147483647,0,-1,-1,0,-1,-1,2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647,0,-1,0,-1,2147483647,2147483647,2147483647,2147483647,0,-1,0,0,0,2147483647,0,2147483647,2147483647,-1,0},{2147483647,2147483647,0,-1,0,-1,0,-1,2147483647,0,0,0,0,-1,2147483647,2147483647,-1,2147483647,-1,0,-1,-1,-1,0,-1,-1,-1,0,0,2147483647,2147483647,2147483647,0,2147483647,0,-1,-1,2147483647,2147483647,-1,2147483647},{0,2147483647,2147483647,2147483647,0,0,0,2147483647,2147483647,0,2147483647,0,0,-1,-1,2147483647,0,0,0,-1,0,2147483647,0,0,-1,0,2147483647,-1,-1,2147483647,0,-1,2147483647,-1,0,0,0,-1,2147483647,0,0},{-1,2147483647,-1,-1,2147483647,-1,2147483647,0,0,-1,0,0,0,2147483647,0,2147483647,2147483647,-1,2147483647,-1,0,-1,0,0,0,2147483647,0,2147483647,0,-1,-1,0,0,2147483647,-1,-1,2147483647,0,2147483647,2147483647,-1},{-1,-1,2147483647,-1,0,0,-1,0,-1,2147483647,2147483647,0,0,-1,0,-1,0,2147483647,0,2147483647,0,-1,-1,0,0,0,0,0,-1,-1,2147483647,-1,0,-1,-1,0,-1,2147483647,0,0,2147483647},{0,-1,-1,2147483647,-1,2147483647,-1,2147483647,2147483647,2147483647,2147483647,0,0,2147483647,2147483647,2147483647,-1,0,0,-1,0,-1,2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,-1,-1,2147483647,0,-1,-1,2147483647,0},{-1,2147483647,2147483647,-1,0,2147483647,0,2147483647,2147483647,0,-1,2147483647,-1,-1,0,2147483647,0,-1,2147483647,2147483647,0,-1,-1,2147483647,2147483647,2147483647,2147483647,0,-1,2147483647,-1,2147483647,-1,2147483647,0,0,2147483647,-1,0,0,-1},{2147483647,0,-1,0,2147483647,2147483647,2147483647,-1,2147483647,-1,-1,2147483647,2147483647,-1,-1,0,0,2147483647,0,0,-1,2147483647,-1,0,-1,-1,2147483647,-1,-1,-1,0,-1,-1,2147483647,0,2147483647,0,2147483647,2147483647,2147483647,-1},{2147483647,2147483647,-1,2147483647,2147483647,2147483647,2147483647,0,0,2147483647,0,0,0,0,-1,2147483647,0,0,0,2147483647,2147483647,2147483647,-1,-1,2147483647,2147483647,-1,2147483647,0,2147483647,-1,-1,-1,-1,0,2147483647,2147483647,0,-1,0,2147483647},{2147483647,-1,2147483647,0,-1,-1,0,2147483647,-1,2147483647,-1,-1,-1,0,0,-1,0,2147483647,2147483647,-1,0,-1,-1,-1,2147483647,-1,2147483647,0,0,2147483647,0,2147483647,0,2147483647,-1,2147483647,-1,0,2147483647,-1,0},{-1,2147483647,-1,2147483647,2147483647,-1,-1,2147483647,2147483647,2147483647,-1,0,2147483647,0,-1,-1,2147483647,-1,-1,2147483647,0,2147483647,-1,0,0,2147483647,2147483647,-1,-1,-1,0,0,0,0,0,2147483647,0,-1,0,0,2147483647},{-1,0,0,0,-1,2147483647,-1,-1,0,2147483647,2147483647,2147483647,-1,-1,-1,-1,2147483647,0,2147483647,0,2147483647,2147483647,0,-1,2147483647,0,-1,-1,-1,2147483647,2147483647,0,0,-1,-1,2147483647,2147483647,0,-1,-1,-1},{-1,-1,2147483647,2147483647,0,0,0,-1,2147483647,0,0,-1,-1,0,-1,-1,0,0,0,-1,0,0,-1,-1,2147483647,-1,2147483647,2147483647,-1,0,2147483647,2147483647,2147483647,-1,-1,0,2147483647,0,-1,0,-1},{0,0,0,0,0,0,0,2147483647,2147483647,-1,-1,-1,-1,2147483647,-1,0,-1,-1,2147483647,-1,0,0,2147483647,-1,2147483647,0,0,0,-1,2147483647,-1,0,2147483647,2147483647,0,2147483647,-1,-1,0,-1,-1},{2147483647,2147483647,-1,0,0,-1,0,2147483647,-1,0,-1,-1,-1,-1,2147483647,0,-1,-1,0,2147483647,-1,0,2147483647,-1,-1,0,2147483647,2147483647,2147483647,-1,2147483647,2147483647,0,-1,0,2147483647,-1,0,2147483647,-1,0},{2147483647,0,0,-1,0,0,2147483647,0,-1,-1,2147483647,0,-1,2147483647,-1,0,2147483647,0,2147483647,2147483647,-1,2147483647,2147483647,-1,-1,2147483647,-1,-1,2147483647,0,0,-1,2147483647,0,-1,2147483647,0,-1,-1,2147483647,-1},{2147483647,-1,-1,-1,0,2147483647,-1,0,2147483647,0,0,-1,0,-1,2147483647,-1,2147483647,-1,2147483647,2147483647,0,-1,-1,-1,0,2147483647,2147483647,-1,-1,-1,0,2147483647,-1,2147483647,0,0,2147483647,0,2147483647,-1,0},{0,2147483647,2147483647,2147483647,-1,0,2147483647,-1,0,0,2147483647,2147483647,2147483647,0,0,2147483647,0,0,0,0,2147483647,0,2147483647,-1,0,-1,2147483647,0,2147483647,2147483647,2147483647,-1,0,0,0,2147483647,0,2147483647,-1,2147483647,0},{2147483647,2147483647,2147483647,-1,2147483647,-1,2147483647,-1,0,0,-1,0,0,2147483647,-1,-1,-1,-1,0,0,0,-1,2147483647,2147483647,2147483647,-1,-1,0,-1,2147483647,0,-1,-1,-1,2147483647,2147483647,0,0,-1,2147483647,2147483647}};

        long start = System.currentTimeMillis();
        sol.wallsAndGates(rooms);
        System.out.println(System.currentTimeMillis() - start);
        /*
        for (int[] r : rooms2) {
            System.out.println(Arrays.toString(r));
        }*/

    }
}
